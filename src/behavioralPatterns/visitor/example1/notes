Source:
https://refactoring.guru/design-patterns/visitor/java/example

Visitor is a behavioral design pattern that allows adding new behaviors to existing class hierarchy without altering any existing code.

Usage of the pattern in Java
Complexity: high
Popularity: low

Usage examples: Visitor isn’t a very common pattern because of its complexity and narrow applicability.

Here are some examples of pattern in core Java libraries:
-> javax.lang.model.element.AnnotationValue and AnnotationValueVisitor
-> javax.lang.model.element.Element and ElementVisitor
-> javax.lang.model.type.TypeMirror and TypeVisitor
-> java.nio.file.FileVisitor and SimpleFileVisitor
-> javax.faces.component.visit.VisitContext and VisitCallback


Code example: Exporting shapes into XML
In this example, we would want to export a set of geometric shapes into XML.
The catch is that we don’t want to change the code of shapes directly or at least keep it to the minimum.
In the end, the Visitor pattern establishes an infrastructure that allows us to add any behaviors to the shapes hierarchy without changing the existing code of those classes.