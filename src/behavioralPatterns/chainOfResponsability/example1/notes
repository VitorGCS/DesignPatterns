Source:
https://refactoring.guru/design-patterns/chain-of-responsibility/java/example

Chain of Responsibility is behavioral design pattern that allows passing request along the chain of potential handlers until one of them handles request.

The pattern allows multiple objects to handle the request without coupling sender class to the concrete classes of the receivers.
The chain can be composed dynamically at runtime with any handler that follows a standard handler interface.

Usage of the pattern in Java
Complexity: medium
Popularity: medium

Usage examples: The Chain of Responsibility is pretty common in Java.
One of the most popular use cases for the pattern is bubbling events to the parent components in GUI classes.
Another notable use case is sequential access filters.

Here are some examples of the pattern in core Java libraries:
-> javax.servlet.Filter#doFilter()
-> java.util.logging.Logger#log()

Identification:
The pattern is recognizable by behavioral methods of one group of objects that indirectly call the same methods in other objects, while all the objects follow the common interface.

Code example: Filtering access
This example shows how a request containing user data passes a sequential chain of handlers that perform various things such as authentication, authorization, and validation.

This example is a bit different from the canonical version of the pattern given by various authors.
Most of the pattern examples are built on the notion of looking for the right handler, launching it and exiting the chain after that.
But here we execute every handler until there’s one that can’t handle a request.
Be aware that this still is the Chain of Responsibility pattern, even though the flow is a bit different.