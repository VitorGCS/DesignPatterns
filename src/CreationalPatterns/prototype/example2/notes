Source:
https://refactoring.guru/design-patterns/prototype/java/example

Prototype is a creational design pattern that allows cloning objects, even complex ones, without coupling to their specific classes.

All prototype classes should have a common interface that makes it possible to copy objects even if their concrete classes are unknown.
Prototype objects can produce full copies since objects of the same class can access each other’s private fields.

Identification:
The prototype can be easily recognized by a "clone" or "copy" methods, etc.

Copying graphical shapes

Let’s take a look at how the Prototype can be implemented without the standard Cloneable interface.


Improved approach - cache: Prototype registry
You could implement a centralized prototype registry (or factory), which would contain a set of pre-defined prototype objects.
This way you could retrieve new objects from the factory by passing its name or other parameters.
The factory would search for an appropriate prototype, clone it and return you a copy.