Source:
https://refactoring.guru/design-patterns/composite/java/example#

Composite is a structural design pattern that allows composing objects into a tree-like structure and work with the it as if it was a singular object.
Composite became a pretty popular solution for the most problems that require building a tree structure.
Composite’s great feature is the ability to run methods recursively over the whole tree structure and sum up the results.

Complexity: medium

Popularity: medium

Usage examples:
The Composite pattern is pretty common in Java code.
It’s often used to represent hierarchies of user interface components or the code that works with graphs.

Here are some composite examples from standard Java libraries:
-> java.awt.Container#add(Component) (practically all over Swing components)
-> javax.faces.component.UIComponent#getChildren() (practically all over JSF UI components)

Identification:
If you have an object tree, and each object of a tree is a part of the same class hierarchy, this is most likely a composite.
If methods of these classes delegate the work to child objects of the tree and do it via the base class/interface of the hierarchy, this is definitely a composite.

Code example: Simple and compound graphical shapes
This example shows how to create complex graphical shapes, composed of simpler shapes and treat both of them uniformly.
