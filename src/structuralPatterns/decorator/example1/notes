Source:
https://refactoring.guru/design-patterns/decorator

Decorator is a structural pattern that allows adding new behaviors to objects dynamically by placing them inside special wrapper objects, called decorators.
Using decorators you can wrap objects countless number of times since both target objects and decorators follow the same interface.
The resulting object will get a stacking behavior of all wrappers.

Usage of the pattern in Java
Complexity: medium
Popularity: medium

Usage examples:
The Decorator is pretty standard in Java code, especially in code related to streams.

Here are some examples of Decorator in core Java libraries:
-> All subclasses of java.io.InputStream, OutputStream, Reader and Writer have constructors that accept objects of their own type.
-> java.util.Collections, methods checkedXXX(), synchronizedXXX() and unmodifiableXXX().
->javax.servlet.http.HttpServletRequestWrapper and HttpServletResponseWrapper

Identification:
Decorator can be recognized by creation methods or constructors that accept objects of the same class or interface as a current class.

Code example: Encoding and compression decorators
This example shows how you can adjust the behavior of an object without changing its code.

Initially, the business logic class could only read and write data in plain text.
Then we created several small wrapper classes that add new behavior after executing standard operations in a wrapped object.
The first wrapper encrypts and decrypts data, and the second one compresses and extracts data.
You can even combine these wrappers by wrapping one decorator with another.